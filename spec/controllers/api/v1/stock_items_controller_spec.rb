require 'rails_helper'

# This spec was generated by rspec-rails when you ran the scaffold generator.
# It demonstrates how one might use RSpec to specify the controller code that
# was generated by Rails when you ran the scaffold generator.
#
# It assumes that the implementation code is generated by the rails scaffold
# generator.  If you are using any extension libraries to generate different
# controller code, this generated spec may or may not pass.
#
# It only uses APIs available in rails and/or rspec-rails.  There are a number
# of tools you can use to make these specs even more expressive, but we're
# sticking to rails and rspec-rails APIs to keep things simple and stable.
#
# Compared to earlier versions of this generator, there is very limited use of
# stubs and message expectations in this spec.  Stubs are only used when there
# is no simpler way to get a handle on the object needed for the example.
# Message expectations are only used when there is no simpler way to specify
# that an instance is receiving a specific message.
#
# Also compared to earlier versions of this generator, there are no longer any
# expectations of assigns and templates rendered. These features have been
# removed from Rails core in Rails 5, but can be added back in via the
# `rails-controller-testing` gem.

RSpec.describe Api::V1::StockItemsController, type: :controller do

  # This should return the minimal set of attributes required to create a valid
  # StockItem. As you add validations to StockItem, be sure to
  # adjust the attributes here as well.
  product_id = Product.create(name: 'Product Test', price: 10.0).id
  store_id = Store.create(name: 'Store Test', address: 'Test Road').id

  let(:valid_attributes) {
    { product_id: product_id, store_id: store_id, items: 5 }
  }

  let(:invalid_attributes) {
    { store_id: store_id, items: 5 }
  }

  # This should return the minimal set of values that should be in the session
  # in order to pass any filters (e.g. authentication) defined in
  # StockItemsController. Be sure to keep this updated too.
  let(:valid_session) { {} }

  describe "GET #index" do
    it "returns a success response" do
      stock_item = StockItem.create! valid_attributes
      get :index, params: {}, session: valid_session
      expect(response).to be_successful
    end
  end

  describe "GET #show" do
    it "returns a success response" do
      stock_item = StockItem.create! valid_attributes
      get :show, params: {id: stock_item.to_param}, session: valid_session
      expect(response).to be_successful
    end
  end

  describe "POST #create" do
    context "with valid params" do
      it "creates a new StockItem" do
        expect {
          post :create, params: {stock_item: valid_attributes}, session: valid_session
        }.to change(StockItem, :count).by(1)
      end

      it "renders a JSON response with the new stock_item" do
        post :create, params: {stock_item: valid_attributes}, session: valid_session
        expect(response).to have_http_status(:created)
        expect(response.content_type).to eq('application/json; charset=utf-8')
        expect(response.location).to eq(api_v1_stock_item_url(StockItem.last))
      end
    end

    context "with invalid params" do
      it "renders a JSON response with errors for the new stock_item" do
        post :create, params: {stock_item: invalid_attributes}, session: valid_session
        expect(response).to have_http_status(:unprocessable_entity)
        expect(response.content_type).to eq('application/json; charset=utf-8')
      end
    end
  end

  describe "PUT #add_items" do
    context "with valid params" do
      it "add new items to the stock" do
        item = StockItem.create(
          product_id: product_id,
          store_id: store_id,
          items: 5
        )
        put :add_items, params: { id: item.id, stock_item: { items: 5 } }
        expect(response).to have_http_status(:ok)
        expect(response.content_type).to eq('application/json; charset=utf-8')
      end
    end

    context "with invalid params" do
      it "renders a json with errors for the stock item" do
        item = StockItem.create(
          product_id: product_id,
          store_id: store_id,
          items: 5
        )
        put :add_items, params: { id: item.id, stock_item: { items: -6 } }
        expect(response).to have_http_status(:unprocessable_entity)
        expect(response.content_type).to eq('application/json; charset=utf-8')
      end
    end
  end

  describe "PUT #remove_items" do
    context "with valid params" do
      it "remove items from the stock" do
        item = StockItem.create(
          product_id: product_id,
          store_id: store_id,
          items: 5
        )
        put :remove_items, params: { id: item.id, stock_item: { items: 5 } }
        expect(response).to have_http_status(:ok)
        expect(response.content_type).to eq('application/json; charset=utf-8')
      end
    end

    context "with invalid params" do
      it "renders a json with errors for the stock item when there is no stock" do
        item = StockItem.create(
          product_id: product_id,
          store_id: store_id,
          items: 5
        )
        put :remove_items, params: { id: item.id, stock_item: { items: 6 } }
        expect(response).to have_http_status(:unprocessable_entity)
        expect(response.content_type).to eq('application/json; charset=utf-8')
      end

      it "renders a json with errors for the stock item when items is negative" do
        item = StockItem.create(
          product_id: product_id,
          store_id: store_id,
          items: 5
        )
        put :remove_items, params: { id: item.id, stock_item: { items: -6 } }
        expect(response).to have_http_status(:unprocessable_entity)
        expect(response.content_type).to eq('application/json; charset=utf-8')
      end
    end
  end
end
